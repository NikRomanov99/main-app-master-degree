/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables.daos


import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import ru.rsu.app.database.generated.tables.Factory
import ru.rsu.app.database.generated.tables.records.FactoryRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FactoryDao(configuration: Configuration?) : DAOImpl<FactoryRecord, ru.rsu.app.database.generated.tables.pojos.Factory, Long>(Factory.FACTORY, ru.rsu.app.database.generated.tables.pojos.Factory::class.java, configuration) {

    /**
     * Create a new FactoryDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: ru.rsu.app.database.generated.tables.pojos.Factory): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.Factory> = fetchRange(Factory.FACTORY.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.Factory> = fetch(Factory.FACTORY.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): ru.rsu.app.database.generated.tables.pojos.Factory? = fetchOne(Factory.FACTORY.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.Factory> = fetchRange(Factory.FACTORY.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.Factory> = fetch(Factory.FACTORY.NAME, *values)

    /**
     * Fetch records that have <code>company_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCompanyName(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.Factory> = fetchRange(Factory.FACTORY.COMPANY_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>company_name IN (values)</code>
     */
    fun fetchByCompanyName(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.Factory> = fetch(Factory.FACTORY.COMPANY_NAME, *values)

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAddress(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.Factory> = fetchRange(Factory.FACTORY.ADDRESS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    fun fetchByAddress(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.Factory> = fetch(Factory.FACTORY.ADDRESS, *values)
}
