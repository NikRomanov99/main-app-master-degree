/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl

import ru.rsu.app.database.generated.tables.AppUser


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AppUserRecord() : UpdatableRecordImpl<AppUserRecord>(AppUser.APP_USER), Record6<Long?, String?, String?, Long?, String?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var surname: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var rRoleId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var description: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var tgUserName: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Long?, String?, String?, Long?, String?, String?> = super.fieldsRow() as Row6<Long?, String?, String?, Long?, String?, String?>
    override fun valuesRow(): Row6<Long?, String?, String?, Long?, String?, String?> = super.valuesRow() as Row6<Long?, String?, String?, Long?, String?, String?>
    override fun field1(): Field<Long?> = AppUser.APP_USER.ID
    override fun field2(): Field<String?> = AppUser.APP_USER.NAME
    override fun field3(): Field<String?> = AppUser.APP_USER.SURNAME
    override fun field4(): Field<Long?> = AppUser.APP_USER.R_ROLE_ID
    override fun field5(): Field<String?> = AppUser.APP_USER.DESCRIPTION
    override fun field6(): Field<String?> = AppUser.APP_USER.TG_USER_NAME
    override fun component1(): Long? = id
    override fun component2(): String? = name
    override fun component3(): String? = surname
    override fun component4(): Long? = rRoleId
    override fun component5(): String? = description
    override fun component6(): String? = tgUserName
    override fun value1(): Long? = id
    override fun value2(): String? = name
    override fun value3(): String? = surname
    override fun value4(): Long? = rRoleId
    override fun value5(): String? = description
    override fun value6(): String? = tgUserName

    override fun value1(value: Long?): AppUserRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): AppUserRecord {
        set(1, value)
        return this
    }

    override fun value3(value: String?): AppUserRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Long?): AppUserRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): AppUserRecord {
        set(4, value)
        return this
    }

    override fun value6(value: String?): AppUserRecord {
        set(5, value)
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Long?, value5: String?, value6: String?): AppUserRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised AppUserRecord
     */
    constructor(id: Long? = null, name: String? = null, surname: String? = null, rRoleId: Long? = null, description: String? = null, tgUserName: String? = null): this() {
        this.id = id
        this.name = name
        this.surname = surname
        this.rRoleId = rRoleId
        this.description = description
        this.tgUserName = tgUserName
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised AppUserRecord
     */
    constructor(value: ru.rsu.app.database.generated.tables.pojos.AppUser?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.surname = value.surname
            this.rRoleId = value.rRoleId
            this.description = value.description
            this.tgUserName = value.tgUserName
            resetChangedOnNotNull()
        }
    }
}
