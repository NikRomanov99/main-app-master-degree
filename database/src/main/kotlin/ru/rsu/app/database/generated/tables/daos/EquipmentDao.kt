/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables.daos


import java.time.LocalDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import ru.rsu.app.database.generated.tables.Equipment
import ru.rsu.app.database.generated.tables.records.EquipmentRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EquipmentDao(configuration: Configuration?) : DAOImpl<EquipmentRecord, ru.rsu.app.database.generated.tables.pojos.Equipment, Long>(Equipment.EQUIPMENT, ru.rsu.app.database.generated.tables.pojos.Equipment::class.java, configuration) {

    /**
     * Create a new EquipmentDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: ru.rsu.app.database.generated.tables.pojos.Equipment): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetchRange(Equipment.EQUIPMENT.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetch(Equipment.EQUIPMENT.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): ru.rsu.app.database.generated.tables.pojos.Equipment? = fetchOne(Equipment.EQUIPMENT.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetchRange(Equipment.EQUIPMENT.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetch(Equipment.EQUIPMENT.NAME, *values)

    /**
     * Fetch records that have <code>r_equipment_type_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfREquipmentTypeId(lowerInclusive: Long?, upperInclusive: Long?): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetchRange(Equipment.EQUIPMENT.R_EQUIPMENT_TYPE_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>r_equipment_type_id IN (values)</code>
     */
    fun fetchByREquipmentTypeId(vararg values: Long): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetch(Equipment.EQUIPMENT.R_EQUIPMENT_TYPE_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>service_life_year BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfServiceLifeYear(lowerInclusive: Int?, upperInclusive: Int?): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetchRange(Equipment.EQUIPMENT.SERVICE_LIFE_YEAR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>service_life_year IN (values)</code>
     */
    fun fetchByServiceLifeYear(vararg values: Int): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetch(Equipment.EQUIPMENT.SERVICE_LIFE_YEAR, *values.toTypedArray())

    /**
     * Fetch records that have <code>manufacture BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfManufacture(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetchRange(Equipment.EQUIPMENT.MANUFACTURE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>manufacture IN (values)</code>
     */
    fun fetchByManufacture(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetch(Equipment.EQUIPMENT.MANUFACTURE, *values)

    /**
     * Fetch records that have <code>manufacture_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfManufactureDate(lowerInclusive: LocalDateTime?, upperInclusive: LocalDateTime?): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetchRange(Equipment.EQUIPMENT.MANUFACTURE_DATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>manufacture_date IN (values)</code>
     */
    fun fetchByManufactureDate(vararg values: LocalDateTime): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetch(Equipment.EQUIPMENT.MANUFACTURE_DATE, *values)

    /**
     * Fetch records that have <code>serial_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSerialNumber(lowerInclusive: String?, upperInclusive: String?): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetchRange(Equipment.EQUIPMENT.SERIAL_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>serial_number IN (values)</code>
     */
    fun fetchBySerialNumber(vararg values: String): List<ru.rsu.app.database.generated.tables.pojos.Equipment> = fetch(Equipment.EQUIPMENT.SERIAL_NUMBER, *values)
}
