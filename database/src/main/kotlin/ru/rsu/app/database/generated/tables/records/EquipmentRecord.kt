/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl

import ru.rsu.app.database.generated.tables.Equipment


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class EquipmentRecord() : UpdatableRecordImpl<EquipmentRecord>(Equipment.EQUIPMENT), Record7<Long?, String?, Long?, Int?, String?, LocalDateTime?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var rEquipmentTypeId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var serviceLifeYear: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var manufacture: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var manufactureDate: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    open var serialNumber: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Long?, String?, Long?, Int?, String?, LocalDateTime?, String?> = super.fieldsRow() as Row7<Long?, String?, Long?, Int?, String?, LocalDateTime?, String?>
    override fun valuesRow(): Row7<Long?, String?, Long?, Int?, String?, LocalDateTime?, String?> = super.valuesRow() as Row7<Long?, String?, Long?, Int?, String?, LocalDateTime?, String?>
    override fun field1(): Field<Long?> = Equipment.EQUIPMENT.ID
    override fun field2(): Field<String?> = Equipment.EQUIPMENT.NAME
    override fun field3(): Field<Long?> = Equipment.EQUIPMENT.R_EQUIPMENT_TYPE_ID
    override fun field4(): Field<Int?> = Equipment.EQUIPMENT.SERVICE_LIFE_YEAR
    override fun field5(): Field<String?> = Equipment.EQUIPMENT.MANUFACTURE
    override fun field6(): Field<LocalDateTime?> = Equipment.EQUIPMENT.MANUFACTURE_DATE
    override fun field7(): Field<String?> = Equipment.EQUIPMENT.SERIAL_NUMBER
    override fun component1(): Long? = id
    override fun component2(): String? = name
    override fun component3(): Long? = rEquipmentTypeId
    override fun component4(): Int? = serviceLifeYear
    override fun component5(): String? = manufacture
    override fun component6(): LocalDateTime? = manufactureDate
    override fun component7(): String? = serialNumber
    override fun value1(): Long? = id
    override fun value2(): String? = name
    override fun value3(): Long? = rEquipmentTypeId
    override fun value4(): Int? = serviceLifeYear
    override fun value5(): String? = manufacture
    override fun value6(): LocalDateTime? = manufactureDate
    override fun value7(): String? = serialNumber

    override fun value1(value: Long?): EquipmentRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): EquipmentRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Long?): EquipmentRecord {
        set(2, value)
        return this
    }

    override fun value4(value: Int?): EquipmentRecord {
        set(3, value)
        return this
    }

    override fun value5(value: String?): EquipmentRecord {
        set(4, value)
        return this
    }

    override fun value6(value: LocalDateTime?): EquipmentRecord {
        set(5, value)
        return this
    }

    override fun value7(value: String?): EquipmentRecord {
        set(6, value)
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: Long?, value4: Int?, value5: String?, value6: LocalDateTime?, value7: String?): EquipmentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised EquipmentRecord
     */
    constructor(id: Long? = null, name: String? = null, rEquipmentTypeId: Long? = null, serviceLifeYear: Int? = null, manufacture: String? = null, manufactureDate: LocalDateTime? = null, serialNumber: String? = null): this() {
        this.id = id
        this.name = name
        this.rEquipmentTypeId = rEquipmentTypeId
        this.serviceLifeYear = serviceLifeYear
        this.manufacture = manufacture
        this.manufactureDate = manufactureDate
        this.serialNumber = serialNumber
        resetChangedOnNotNull()
    }

    /**
     * Create a detached, initialised EquipmentRecord
     */
    constructor(value: ru.rsu.app.database.generated.tables.pojos.Equipment?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.rEquipmentTypeId = value.rEquipmentTypeId
            this.serviceLifeYear = value.serviceLifeYear
            this.manufacture = value.manufacture
            this.manufactureDate = value.manufactureDate
            this.serialNumber = value.serialNumber
            resetChangedOnNotNull()
        }
    }
}
