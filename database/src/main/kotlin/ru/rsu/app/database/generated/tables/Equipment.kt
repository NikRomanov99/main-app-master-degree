/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import ru.rsu.app.database.generated.Public
import ru.rsu.app.database.generated.keys.EQUIPMENT_PKEY
import ru.rsu.app.database.generated.keys.EQUIPMENT__FK_EQUIPMENT_EQUIPMENT_TYPE_ID
import ru.rsu.app.database.generated.tables.records.EquipmentRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Equipment(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, EquipmentRecord>?,
    aliased: Table<EquipmentRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<EquipmentRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.equipment</code>
         */
        val EQUIPMENT: Equipment = Equipment()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<EquipmentRecord> = EquipmentRecord::class.java

    /**
     * The column <code>public.equipment.id</code>.
     */
    val ID: TableField<EquipmentRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.equipment.name</code>.
     */
    val NAME: TableField<EquipmentRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.equipment.r_equipment_type_id</code>.
     */
    val R_EQUIPMENT_TYPE_ID: TableField<EquipmentRecord, Long?> = createField(DSL.name("r_equipment_type_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.equipment.service_life_year</code>.
     */
    val SERVICE_LIFE_YEAR: TableField<EquipmentRecord, Int?> = createField(DSL.name("service_life_year"), SQLDataType.INTEGER, this, "")

    /**
     * The column <code>public.equipment.manufacture</code>.
     */
    val MANUFACTURE: TableField<EquipmentRecord, String?> = createField(DSL.name("manufacture"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.equipment.manufacture_date</code>.
     */
    val MANUFACTURE_DATE: TableField<EquipmentRecord, LocalDateTime?> = createField(DSL.name("manufacture_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column <code>public.equipment.serial_number</code>.
     */
    val SERIAL_NUMBER: TableField<EquipmentRecord, String?> = createField(DSL.name("serial_number"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<EquipmentRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<EquipmentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.equipment</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.equipment</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.equipment</code> table reference
     */
    constructor(): this(DSL.name("equipment"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, EquipmentRecord>): this(Internal.createPathAlias(child, key), child, key, EQUIPMENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<EquipmentRecord, Long?> = super.getIdentity() as Identity<EquipmentRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<EquipmentRecord> = EQUIPMENT_PKEY
    override fun getReferences(): List<ForeignKey<EquipmentRecord, *>> = listOf(EQUIPMENT__FK_EQUIPMENT_EQUIPMENT_TYPE_ID)

    private lateinit var _equipmentType: EquipmentType

    /**
     * Get the implicit join path to the <code>public.equipment_type</code>
     * table.
     */
    fun equipmentType(): EquipmentType {
        if (!this::_equipmentType.isInitialized)
            _equipmentType = EquipmentType(this, EQUIPMENT__FK_EQUIPMENT_EQUIPMENT_TYPE_ID)

        return _equipmentType;
    }

    val equipmentType: EquipmentType
        get(): EquipmentType = equipmentType()
    override fun `as`(alias: String): Equipment = Equipment(DSL.name(alias), this)
    override fun `as`(alias: Name): Equipment = Equipment(alias, this)
    override fun `as`(alias: Table<*>): Equipment = Equipment(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Equipment = Equipment(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Equipment = Equipment(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Equipment = Equipment(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Long?, String?, Long?, Int?, String?, LocalDateTime?, String?> = super.fieldsRow() as Row7<Long?, String?, Long?, Int?, String?, LocalDateTime?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, String?, Long?, Int?, String?, LocalDateTime?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, String?, Long?, Int?, String?, LocalDateTime?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
