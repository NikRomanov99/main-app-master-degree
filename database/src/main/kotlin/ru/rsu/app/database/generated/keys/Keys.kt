/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.keys


import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal

import ru.rsu.app.database.generated.tables.AppUser
import ru.rsu.app.database.generated.tables.AvailableEquipment
import ru.rsu.app.database.generated.tables.Equipment
import ru.rsu.app.database.generated.tables.EquipmentType
import ru.rsu.app.database.generated.tables.Factory
import ru.rsu.app.database.generated.tables.Role
import ru.rsu.app.database.generated.tables.records.AppUserRecord
import ru.rsu.app.database.generated.tables.records.AvailableEquipmentRecord
import ru.rsu.app.database.generated.tables.records.EquipmentRecord
import ru.rsu.app.database.generated.tables.records.EquipmentTypeRecord
import ru.rsu.app.database.generated.tables.records.FactoryRecord
import ru.rsu.app.database.generated.tables.records.RoleRecord



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val APP_USER_PKEY: UniqueKey<AppUserRecord> = Internal.createUniqueKey(AppUser.APP_USER, DSL.name("app_user_pkey"), arrayOf(AppUser.APP_USER.ID), true)
val AVAILABLE_EQUIPMENT_PKEY: UniqueKey<AvailableEquipmentRecord> = Internal.createUniqueKey(AvailableEquipment.AVAILABLE_EQUIPMENT, DSL.name("available_equipment_pkey"), arrayOf(AvailableEquipment.AVAILABLE_EQUIPMENT.ID), true)
val EQUIPMENT_PKEY: UniqueKey<EquipmentRecord> = Internal.createUniqueKey(Equipment.EQUIPMENT, DSL.name("equipment_pkey"), arrayOf(Equipment.EQUIPMENT.ID), true)
val EQUIPMENT_TYPE_PKEY: UniqueKey<EquipmentTypeRecord> = Internal.createUniqueKey(EquipmentType.EQUIPMENT_TYPE, DSL.name("equipment_type_pkey"), arrayOf(EquipmentType.EQUIPMENT_TYPE.ID), true)
val FACTORY_PKEY: UniqueKey<FactoryRecord> = Internal.createUniqueKey(Factory.FACTORY, DSL.name("factory_pkey"), arrayOf(Factory.FACTORY.ID), true)
val ROLE_PKEY: UniqueKey<RoleRecord> = Internal.createUniqueKey(Role.ROLE, DSL.name("role_pkey"), arrayOf(Role.ROLE.ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val APP_USER__FK_USER_ROLE_ID: ForeignKey<AppUserRecord, RoleRecord> = Internal.createForeignKey(AppUser.APP_USER, DSL.name("fk_user_role_id"), arrayOf(AppUser.APP_USER.R_ROLE_ID), ru.rsu.app.database.generated.keys.ROLE_PKEY, arrayOf(Role.ROLE.ID), true)
val AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_EQUIPMENT_ID: ForeignKey<AvailableEquipmentRecord, EquipmentRecord> = Internal.createForeignKey(AvailableEquipment.AVAILABLE_EQUIPMENT, DSL.name("fk_aequipment_equipment_id"), arrayOf(AvailableEquipment.AVAILABLE_EQUIPMENT.R_EQUIPMENT_ID), ru.rsu.app.database.generated.keys.EQUIPMENT_PKEY, arrayOf(Equipment.EQUIPMENT.ID), true)
val AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_FACTORY_ID: ForeignKey<AvailableEquipmentRecord, FactoryRecord> = Internal.createForeignKey(AvailableEquipment.AVAILABLE_EQUIPMENT, DSL.name("fk_aequipment_factory_id"), arrayOf(AvailableEquipment.AVAILABLE_EQUIPMENT.R_FACTORY_ID), ru.rsu.app.database.generated.keys.FACTORY_PKEY, arrayOf(Factory.FACTORY.ID), true)
val AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_USER_ID: ForeignKey<AvailableEquipmentRecord, AppUserRecord> = Internal.createForeignKey(AvailableEquipment.AVAILABLE_EQUIPMENT, DSL.name("fk_aequipment_user_id"), arrayOf(AvailableEquipment.AVAILABLE_EQUIPMENT.R_LAST_INSPECTION_USER_ID), ru.rsu.app.database.generated.keys.APP_USER_PKEY, arrayOf(AppUser.APP_USER.ID), true)
val EQUIPMENT__FK_EQUIPMENT_EQUIPMENT_TYPE_ID: ForeignKey<EquipmentRecord, EquipmentTypeRecord> = Internal.createForeignKey(Equipment.EQUIPMENT, DSL.name("fk_equipment_equipment_type_id"), arrayOf(Equipment.EQUIPMENT.R_EQUIPMENT_TYPE_ID), ru.rsu.app.database.generated.keys.EQUIPMENT_TYPE_PKEY, arrayOf(EquipmentType.EQUIPMENT_TYPE.ID), true)
