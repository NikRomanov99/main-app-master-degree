/*
 * This file is generated by jOOQ.
 */
package ru.rsu.app.database.generated.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row6
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import ru.rsu.app.database.generated.Public
import ru.rsu.app.database.generated.keys.AVAILABLE_EQUIPMENT_PKEY
import ru.rsu.app.database.generated.keys.AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_EQUIPMENT_ID
import ru.rsu.app.database.generated.keys.AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_FACTORY_ID
import ru.rsu.app.database.generated.keys.AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_USER_ID
import ru.rsu.app.database.generated.tables.records.AvailableEquipmentRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AvailableEquipment(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, AvailableEquipmentRecord>?,
    aliased: Table<AvailableEquipmentRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<AvailableEquipmentRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.available_equipment</code>
         */
        val AVAILABLE_EQUIPMENT: AvailableEquipment = AvailableEquipment()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<AvailableEquipmentRecord> = AvailableEquipmentRecord::class.java

    /**
     * The column <code>public.available_equipment.id</code>.
     */
    val ID: TableField<AvailableEquipmentRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.available_equipment.r_equipment_id</code>.
     */
    val R_EQUIPMENT_ID: TableField<AvailableEquipmentRecord, Long?> = createField(DSL.name("r_equipment_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.available_equipment.description</code>.
     */
    val DESCRIPTION: TableField<AvailableEquipmentRecord, String?> = createField(DSL.name("description"), SQLDataType.CLOB, this, "")

    /**
     * The column
     * <code>public.available_equipment.last_tech_inspection_date</code>.
     */
    val LAST_TECH_INSPECTION_DATE: TableField<AvailableEquipmentRecord, LocalDateTime?> = createField(DSL.name("last_tech_inspection_date"), SQLDataType.LOCALDATETIME(6), this, "")

    /**
     * The column
     * <code>public.available_equipment.r_last_inspection_user_id</code>.
     */
    val R_LAST_INSPECTION_USER_ID: TableField<AvailableEquipmentRecord, Long?> = createField(DSL.name("r_last_inspection_user_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.available_equipment.r_factory_id</code>.
     */
    val R_FACTORY_ID: TableField<AvailableEquipmentRecord, Long?> = createField(DSL.name("r_factory_id"), SQLDataType.BIGINT.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<AvailableEquipmentRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<AvailableEquipmentRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.available_equipment</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.available_equipment</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.available_equipment</code> table reference
     */
    constructor(): this(DSL.name("available_equipment"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, AvailableEquipmentRecord>): this(Internal.createPathAlias(child, key), child, key, AVAILABLE_EQUIPMENT, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<AvailableEquipmentRecord, Long?> = super.getIdentity() as Identity<AvailableEquipmentRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<AvailableEquipmentRecord> = AVAILABLE_EQUIPMENT_PKEY
    override fun getReferences(): List<ForeignKey<AvailableEquipmentRecord, *>> = listOf(AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_EQUIPMENT_ID, AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_USER_ID, AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_FACTORY_ID)

    private lateinit var _equipment: Equipment
    private lateinit var _appUser: AppUser
    private lateinit var _factory: Factory

    /**
     * Get the implicit join path to the <code>public.equipment</code> table.
     */
    fun equipment(): Equipment {
        if (!this::_equipment.isInitialized)
            _equipment = Equipment(this, AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_EQUIPMENT_ID)

        return _equipment;
    }

    val equipment: Equipment
        get(): Equipment = equipment()

    /**
     * Get the implicit join path to the <code>public.app_user</code> table.
     */
    fun appUser(): AppUser {
        if (!this::_appUser.isInitialized)
            _appUser = AppUser(this, AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_USER_ID)

        return _appUser;
    }

    val appUser: AppUser
        get(): AppUser = appUser()

    /**
     * Get the implicit join path to the <code>public.factory</code> table.
     */
    fun factory(): Factory {
        if (!this::_factory.isInitialized)
            _factory = Factory(this, AVAILABLE_EQUIPMENT__FK_AEQUIPMENT_FACTORY_ID)

        return _factory;
    }

    val factory: Factory
        get(): Factory = factory()
    override fun `as`(alias: String): AvailableEquipment = AvailableEquipment(DSL.name(alias), this)
    override fun `as`(alias: Name): AvailableEquipment = AvailableEquipment(alias, this)
    override fun `as`(alias: Table<*>): AvailableEquipment = AvailableEquipment(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): AvailableEquipment = AvailableEquipment(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): AvailableEquipment = AvailableEquipment(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): AvailableEquipment = AvailableEquipment(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row6<Long?, Long?, String?, LocalDateTime?, Long?, Long?> = super.fieldsRow() as Row6<Long?, Long?, String?, LocalDateTime?, Long?, Long?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, LocalDateTime?, Long?, Long?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, LocalDateTime?, Long?, Long?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
